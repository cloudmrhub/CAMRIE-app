# Stage 1: Build the sysimage
FROM julia:1.11 AS builder

# Install compilers and build tools
RUN apt-get update && apt-get install -y build-essential clang
RUN apt-get update && apt-get install -y libgfortran5, libstdc++6 libgomp1 libatomic

WORKDIR /var/task
ENV JULIA_PKG_PRECOMPILE=0
ENV JULIA_PKG_PRECOMPILE_AUTO=0
# Set the depot path so artifacts (like OpenSpecFun) are stored here
ENV JULIA_DEPOT_PATH=/var/task/julia_depot
# Set the artifacts directory to a custom writable location
ENV JULIA_ARTIFACTS_DIR=/var/task/julia_artifacts
RUN mkdir -p /var/task/julia_artifacts

# Copy your precompilation entry file (using test.jl as precompiler)
COPY test.jl /var/task/precompiler.jl

# Install required packages including PackageCompiler and MKL_jll
RUN julia --startup-file=no --compile=min --optimize=0 -e "\
    using Pkg; \
    Pkg.Registry.add(\"General\"); \
    Pkg.Registry.add(; url=\"https://github.com/cloudmrhub/CloudRegistry.git\"); \
    Pkg.add([\"KomaNYU\", \"FileIO\", \"JLD2\", \"NIfTI\", \"NPZ\", \"JSON\", \"Printf\", \"MKL_jll\", \"PackageCompiler\"]); \
    Pkg.instantiate();"

# # Ensure OpenSpecFun artifact is installed
# # Step 1: Add OpenSpecFun_jll
# RUN julia --startup-file=no -e "using Pkg; Pkg.add(\"OpenSpecFun_jll\")"
# # Step 2: Instantiate the environment (again, to pick up the new artifact)
# RUN julia --startup-file=no -e "using Pkg; Pkg.instantiate()"
# # Step 3: Load the package and print the artifact path
# RUN julia --startup-file=no -e "using OpenSpecFun_jll; println(OpenSpecFun_jll.libOpenSpecFun)"

# Create a custom sysimage with precompiled packages (including OpenSpecFun_jll)
RUN julia --startup-file=no --compile=min --optimize=0 -e "\
    using PackageCompiler; \
    create_sysimage([:KomaNYU, :FileIO, :JLD2, :NIfTI, :NPZ, :JSON, :Printf, :MKL_jll], \
        sysimage_path=\"/var/task/sys.so\", \
        precompile_execution_file=\"precompiler.jl\", \
        cpu_target=\"core2\")"


# Stage 2: Final Lambda container
FROM public.ecr.aws/lambda/python:3.10

# Set the depot and artifacts directories to a writable location (/tmp)
ENV JULIA_DEPOT_PATH=/tmp/julia_depot
ENV JULIA_ARTIFACTS_DIR=/tmp/julia_artifacts

# Create the writable directories in /tmp
RUN mkdir -p /tmp/julia_depot /tmp/julia_artifacts

# Copy requirements.txt
COPY requirements.txt ${LAMBDA_TASK_ROOT}

# Install system dependencies (Julia, Git, wget, tar)
RUN yum update -y && \
    yum install -y wget git tar && \
    wget https://julialang-s3.julialang.org/bin/linux/x64/1.11/julia-1.11.3-linux-x86_64.tar.gz && \
    tar xzf julia-1.11.3-linux-x86_64.tar.gz -C /usr --strip-components 1 && \
    rm -rf julia-1.11.3-linux-x86_64.tar.gz

# Install the specified packages
RUN pip install -r requirements.txt

# Install the mroptimum-tools package and cloudmr-tools
RUN pip install git+https://github.com/erosmontin/pyable
RUN pip install --upgrade git+https://github.com/cloudmrhub/cloudmr-tools

RUN yum install -y libgfortran libstdc++ libgomp libatomic
# Copy function code
COPY lambda_function.py ${LAMBDA_TASK_ROOT}
COPY common.py  ${LAMBDA_TASK_ROOT}

## Create the Python packages directory and set permissions
RUN mkdir -p ${LAMBDA_TASK_ROOT}/packages && chmod -R 777 ${LAMBDA_TASK_ROOT}/packages

# Copy your simulator script into the Lambda task root
COPY simulator.jl ${LAMBDA_TASK_ROOT}/simulator.jl

# Copy the precompiled sysimage from the builder stage (remains in /var/task, which is read-only)
COPY --from=builder ${LAMBDA_TASK_ROOT}/sys.so /var/task/sys.so

# Copy the entire Julia depot from the builder stage to the writable /tmp directory
COPY --from=builder ${LAMBDA_TASK_ROOT}/julia_depot /tmp/julia_depot

# (Optional) Copy simulator.jl again to /var/task for consistency

# Verify that the sysimage exists (for debugging)
RUN ls -l ${LAMBDA_TASK_ROOT}/sys.so

# Copy test.jl into the Lambda task root as well
COPY test.jl ${LAMBDA_TASK_ROOT}/test.jl

ENV MPLCONFIGDIR=/tmp/matplotlib
RUN mkdir -p /tmp/matplotlib && chmod -R 777 /tmp/matplotlib
RUN julia --sysimage /var/task/sys.so test.jl


# Set the default command (using your Lambda handler)
CMD [ "lambda_function.handler" ]
